자바에서 "제네릭"은 다양한 타입의 객체를 다루는 메서드나 컬렉션 클래스에 컴파일 시 타입 체크를 해주는 기능입니다. 
제네릭을 사용하면, 클래스나 메서드 내부에서 사용할 데이터 타입을 외부에서 지정할 수 있게 되어
코드의 재사용성을 높이고 타입 안정성을 확보

List<String> list = new ArrayList<String>();

list 변수에는 String 객체만 추가할 수 있으며,
다른 타입의 객체를 추가하려고 하면 컴파일 오류가 발생
제네릭을 사용하면 프로그램의 타입 안정성을 보장 

<>다이아몬드 연산자
배열은 고정된 크기의 동일한 타입의 요소들을 저장할 수 있습니다
제네릭은 크기가 동적으로 변하는 컬렉션(예 : ArrayList, LinkedList 등) 에 사용되며,
다양한 타입의 객체를 저장하고 처리할 수 있습니다. 
컬렉션(바구니)은 객체를 저장하므로, 기본 데이터 타입은 사용할 수 없고 대신에
래퍼 클래스(Integer, Double, Character 등)을 사용해야 합니다. 
----필요에 따라 배열과 제네릭을 혼합하여 사용합니다. 

제네릭은 변신로봇이라고 불리기도 한다 
특정타입만 다루지 않고, 여러 종류의 타입으로 변신할 수 있도록 클래스나 메소드를 일반화시키는 기법
클래스나 메소드를 일반화시키는 기법 <E>,<K>,<V> : 타입 매개 변수 

컬렉션은 제너릭(generics) 기법으로 구현된다. <일반화> --> <구체화>
컬렉션의 요소는 객체만 가능하므로 기본적으로int, char, double 등 기본 타입의 사용이 불가
그래서 특정 타입만 다루지 않고, 여러 종류의 타입으로 변신할 수 있도록
클래스나 메소드를 일반화시키는 걸 제네릭 이라고 한다. 

제너릭스를 사용하는 이유
컴파일 단계에서 잘못 된 타입 사용할 수 있는 문제를 제거한다. 
컬렉션에 저장된 여러 종류의 객체를 꺼내서 사용할 떄 객체의 종류에 따라
매번 형번환을 해야하기 때문에 코드가 복잡해진다
컬렉션, 람다식(함수적 인터페이스), 스트림, NIO에서 널리 사용한다.
제너릭스를 모르면 API Document 해석이 어렵기 때문에 학습에 제한이 생긴다.

제너릭 타입은 두 개 이상의 타입 파라미터를 사용 가능하다
각 타입 파라미터는 콤마로 구분하여 사용하면 된다. 

제너릭스 타입을 부모 클래스로 사용해야 할 경우에는
타입 파라미터는 자식 클래스에도 기술해야하며, 추가적인 타입 파라미터를 가질 수 있다. 
public class ChildProduct<T, M> extends Product<T, M>{ ....}
public class ChildProduct<T, M, C> extends Product<T, M>{ ....}
